@page "/create-announcement"
@inject IAnnouncementService AnnouncementService
@inject NavigationManager NavigationManager
@using MudBlazor
@using NerdySoftBlazor.Dto.AnnouncementDto
@using NerdySoftBlazor.Service.IServices
@using System.Globalization

@if (_newAnnouncement != null)
{
<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h5">Create New Announcement</MudText>

        <MudTextField @bind-Value="_newAnnouncement.Title" Label="Title" Required="true" />
        <MudTextField @bind-Value="_newAnnouncement.Description" Label="Description" Required="true" />
        <MudDatePicker
            @bind-Date="_newAnnouncement.Date"
            Label="Date"
            DateFormat="dd.MM.yyyy"
        IconSize="Size.Small"
        Required="true" />

        <MudButton OnClick="CreateAnnouncement" Color="Color.Primary">Save</MudButton>
    </MudCardContent>
</MudCard>
}
else
{
<MudText Typo="Typo.h6">Loading...</MudText>
}

@code {
private CreateAnnouncementDto _newAnnouncement;

protected override async Task OnInitializedAsync()
{
_newAnnouncement = new CreateAnnouncementDto
{
Title = string.Empty,
Description = string.Empty,
Date = DateTime.Now
};
}

private async Task CreateAnnouncement()
{
try
{
var result = await AnnouncementService.CreateAsync(_newAnnouncement, "your-token-here");

if (result.IsSuccess)
{
NavigationManager.NavigateTo("/announcements");
}
else
{
// Log error if the creation failed
Console.WriteLine($"Error creating announcement: {result.ErrorMessage}");
}
}
catch (Exception ex)
{
// Log unhandled exceptions
Console.WriteLine($"Unhandled exception: {ex.Message}");
}
}
}
